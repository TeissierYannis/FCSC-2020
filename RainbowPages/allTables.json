{"data":{"__schema":{"queryType":{"name":"Query"},"mutationType":null,"types":[{"kind":"OBJECT","name":"Query","description":"The root query type which gives access points into the data universe.","fields":[{"name":"query","description":"Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"Query","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"nodeId","description":"The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"ID","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"node","description":"Fetches an object given its globally unique `ID`.","args":[{"name":"nodeId","description":"The globally unique `ID`.","type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"ID","ofType":null}},"defaultValue":null}],"type":{"kind":"INTERFACE","name":"Node","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"allCooks","description":"Reads and enables pagination through a set of `Cook`.","args":[{"name":"first","description":"Only read the first `n` values of the set.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"last","description":"Only read the last `n` values of the set.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"offset","description":"Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"before","description":"Read all values in the set before (above) this cursor.","type":{"kind":"SCALAR","name":"Cursor","ofType":null},"defaultValue":null},{"name":"after","description":"Read all values in the set after (below) this cursor.","type":{"kind":"SCALAR","name":"Cursor","ofType":null},"defaultValue":null},{"name":"orderBy","description":"The method to use when ordering `Cook`.","type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"ENUM","name":"CooksOrderBy","ofType":null}}},"defaultValue":"[PRIMARY_KEY_ASC]"},{"name":"condition","description":"A condition to be used in determining which values should be returned by the collection.","type":{"kind":"INPUT_OBJECT","name":"CookCondition","ofType":null},"defaultValue":null},{"name":"filter","description":"A filter to be used in determining which values should be returned by the collection.","type":{"kind":"INPUT_OBJECT","name":"CookFilter","ofType":null},"defaultValue":null}],"type":{"kind":"OBJECT","name":"CooksConnection","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"allFlags","description":"Reads and enables pagination through a set of `Flag`.","args":[{"name":"first","description":"Only read the first `n` values of the set.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"last","description":"Only read the last `n` values of the set.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"offset","description":"Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"before","description":"Read all values in the set before (above) this cursor.","type":{"kind":"SCALAR","name":"Cursor","ofType":null},"defaultValue":null},{"name":"after","description":"Read all values in the set after (below) this cursor.","type":{"kind":"SCALAR","name":"Cursor","ofType":null},"defaultValue":null},{"name":"orderBy","description":"The method to use when ordering `Flag`.","type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"ENUM","name":"FlagsOrderBy","ofType":null}}},"defaultValue":"[PRIMARY_KEY_ASC]"},{"name":"condition","description":"A condition to be used in determining which values should be returned by the collection.","type":{"kind":"INPUT_OBJECT","name":"FlagCondition","ofType":null},"defaultValue":null},{"name":"filter","description":"A filter to be used in determining which values should be returned by the collection.","type":{"kind":"INPUT_OBJECT","name":"FlagFilter","ofType":null},"defaultValue":null}],"type":{"kind":"OBJECT","name":"FlagsConnection","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"cookById","description":null,"args":[{"name":"id","description":null,"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Int","ofType":null}},"defaultValue":null}],"type":{"kind":"OBJECT","name":"Cook","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"flagById","description":null,"args":[{"name":"id","description":null,"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Int","ofType":null}},"defaultValue":null}],"type":{"kind":"OBJECT","name":"Flag","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"cook","description":"Reads a single `Cook` using its globally unique `ID`.","args":[{"name":"nodeId","description":"The globally unique `ID` to be used in selecting a single `Cook`.","type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"ID","ofType":null}},"defaultValue":null}],"type":{"kind":"OBJECT","name":"Cook","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"flag","description":"Reads a single `Flag` using its globally unique `ID`.","args":[{"name":"nodeId","description":"The globally unique `ID` to be used in selecting a single `Flag`.","type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"ID","ofType":null}},"defaultValue":null}],"type":{"kind":"OBJECT","name":"Flag","ofType":null},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[{"kind":"INTERFACE","name":"Node","ofType":null}],"enumValues":null,"possibleTypes":null},{"kind":"INTERFACE","name":"Node","description":"An object with a globally unique `ID`.","fields":[{"name":"nodeId","description":"A globally unique identifier. Can be used in various places throughout the system to identify this single value.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"ID","ofType":null}},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":null,"enumValues":null,"possibleTypes":[{"kind":"OBJECT","name":"Query","ofType":null},{"kind":"OBJECT","name":"Cook","ofType":null},{"kind":"OBJECT","name":"Flag","ofType":null}]},{"kind":"SCALAR","name":"ID","description":"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.","fields":null,"inputFields":null,"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"SCALAR","name":"Int","description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.","fields":null,"inputFields":null,"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"SCALAR","name":"Cursor","description":"A location in a connection that can be used for resuming pagination.","fields":null,"inputFields":null,"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"ENUM","name":"CooksOrderBy","description":"Methods to use when ordering `Cook`.","fields":null,"inputFields":null,"interfaces":null,"enumValues":[{"name":"NATURAL","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"ID_ASC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"ID_DESC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"FIRSTNAME_ASC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"FIRSTNAME_DESC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"LASTNAME_ASC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"LASTNAME_DESC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"SPECIALITY_ASC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"SPECIALITY_DESC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"PRICE_ASC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"PRICE_DESC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"PRIMARY_KEY_ASC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"PRIMARY_KEY_DESC","description":null,"isDeprecated":false,"deprecationReason":null}],"possibleTypes":null},{"kind":"INPUT_OBJECT","name":"CookCondition","description":"A condition to be used against `Cook` object types. All fields are tested for equality and combined with a logical ‘and.’","fields":null,"inputFields":[{"name":"id","description":"Checks for equality with the object’s `id` field.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"firstname","description":"Checks for equality with the object’s `firstname` field.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"lastname","description":"Checks for equality with the object’s `lastname` field.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"speciality","description":"Checks for equality with the object’s `speciality` field.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"price","description":"Checks for equality with the object’s `price` field.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null}],"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"SCALAR","name":"String","description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","fields":null,"inputFields":null,"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"INPUT_OBJECT","name":"CookFilter","description":"A filter to be used against `Cook` object types. All fields are combined with a logical ‘and.’","fields":null,"inputFields":[{"name":"id","description":"Filter by the object’s `id` field.","type":{"kind":"INPUT_OBJECT","name":"IntFilter","ofType":null},"defaultValue":null},{"name":"firstname","description":"Filter by the object’s `firstname` field.","type":{"kind":"INPUT_OBJECT","name":"StringFilter","ofType":null},"defaultValue":null},{"name":"lastname","description":"Filter by the object’s `lastname` field.","type":{"kind":"INPUT_OBJECT","name":"StringFilter","ofType":null},"defaultValue":null},{"name":"speciality","description":"Filter by the object’s `speciality` field.","type":{"kind":"INPUT_OBJECT","name":"StringFilter","ofType":null},"defaultValue":null},{"name":"price","description":"Filter by the object’s `price` field.","type":{"kind":"INPUT_OBJECT","name":"IntFilter","ofType":null},"defaultValue":null},{"name":"and","description":"Checks for all expressions in this list.","type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"INPUT_OBJECT","name":"CookFilter","ofType":null}}},"defaultValue":null},{"name":"or","description":"Checks for any expressions in this list.","type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"INPUT_OBJECT","name":"CookFilter","ofType":null}}},"defaultValue":null},{"name":"not","description":"Negates the expression.","type":{"kind":"INPUT_OBJECT","name":"CookFilter","ofType":null},"defaultValue":null}],"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"INPUT_OBJECT","name":"IntFilter","description":"A filter to be used against Int fields. All fields are combined with a logical ‘and.’","fields":null,"inputFields":[{"name":"isNull","description":"Is null (if `true` is specified) or is not null (if `false` is specified).","type":{"kind":"SCALAR","name":"Boolean","ofType":null},"defaultValue":null},{"name":"equalTo","description":"Equal to the specified value.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"notEqualTo","description":"Not equal to the specified value.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"distinctFrom","description":"Not equal to the specified value, treating null like an ordinary value.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"notDistinctFrom","description":"Equal to the specified value, treating null like an ordinary value.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"in","description":"Included in the specified list.","type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Int","ofType":null}}},"defaultValue":null},{"name":"notIn","description":"Not included in the specified list.","type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Int","ofType":null}}},"defaultValue":null},{"name":"lessThan","description":"Less than the specified value.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"lessThanOrEqualTo","description":"Less than or equal to the specified value.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"greaterThan","description":"Greater than the specified value.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"greaterThanOrEqualTo","description":"Greater than or equal to the specified value.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null}],"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"SCALAR","name":"Boolean","description":"The `Boolean` scalar type represents `true` or `false`.","fields":null,"inputFields":null,"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"INPUT_OBJECT","name":"StringFilter","description":"A filter to be used against String fields. All fields are combined with a logical ‘and.’","fields":null,"inputFields":[{"name":"isNull","description":"Is null (if `true` is specified) or is not null (if `false` is specified).","type":{"kind":"SCALAR","name":"Boolean","ofType":null},"defaultValue":null},{"name":"equalTo","description":"Equal to the specified value.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notEqualTo","description":"Not equal to the specified value.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"distinctFrom","description":"Not equal to the specified value, treating null like an ordinary value.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notDistinctFrom","description":"Equal to the specified value, treating null like an ordinary value.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"in","description":"Included in the specified list.","type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"String","ofType":null}}},"defaultValue":null},{"name":"notIn","description":"Not included in the specified list.","type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"String","ofType":null}}},"defaultValue":null},{"name":"lessThan","description":"Less than the specified value.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"lessThanOrEqualTo","description":"Less than or equal to the specified value.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"greaterThan","description":"Greater than the specified value.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"greaterThanOrEqualTo","description":"Greater than or equal to the specified value.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"includes","description":"Contains the specified string (case-sensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notIncludes","description":"Does not contain the specified string (case-sensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"includesInsensitive","description":"Contains the specified string (case-insensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notIncludesInsensitive","description":"Does not contain the specified string (case-insensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"startsWith","description":"Starts with the specified string (case-sensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notStartsWith","description":"Does not start with the specified string (case-sensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"startsWithInsensitive","description":"Starts with the specified string (case-insensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notStartsWithInsensitive","description":"Does not start with the specified string (case-insensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"endsWith","description":"Ends with the specified string (case-sensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notEndsWith","description":"Does not end with the specified string (case-sensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"endsWithInsensitive","description":"Ends with the specified string (case-insensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notEndsWithInsensitive","description":"Does not end with the specified string (case-insensitive).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"like","description":"Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notLike","description":"Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"likeInsensitive","description":"Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notLikeInsensitive","description":"Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"similarTo","description":"Matches the specified pattern using the SQL standard's definition of a regular expression.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null},{"name":"notSimilarTo","description":"Does not match the specified pattern using the SQL standard's definition of a regular expression.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null}],"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"CooksConnection","description":"A connection to a list of `Cook` values.","fields":[{"name":"nodes","description":"A list of `Cook` objects.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"LIST","name":null,"ofType":{"kind":"OBJECT","name":"Cook","ofType":null}}},"isDeprecated":false,"deprecationReason":null},{"name":"edges","description":"A list of edges which contains the `Cook` and cursor to aid in pagination.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"CooksEdge","ofType":null}}}},"isDeprecated":false,"deprecationReason":null},{"name":"pageInfo","description":"Information to aid in pagination.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"PageInfo","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"totalCount","description":"The count of *all* `Cook` you could get from the connection.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Int","ofType":null}},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"Cook","description":null,"fields":[{"name":"nodeId","description":"A globally unique identifier. Can be used in various places throughout the system to identify this single value.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"ID","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"id","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Int","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"firstname","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"lastname","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"speciality","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"price","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Int","ofType":null}},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[{"kind":"INTERFACE","name":"Node","ofType":null}],"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"CooksEdge","description":"A `Cook` edge in the connection.","fields":[{"name":"cursor","description":"A cursor for use in pagination.","args":[],"type":{"kind":"SCALAR","name":"Cursor","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"node","description":"The `Cook` at the end of the edge.","args":[],"type":{"kind":"OBJECT","name":"Cook","ofType":null},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"PageInfo","description":"Information about pagination in a connection.","fields":[{"name":"hasNextPage","description":"When paginating forwards, are there more items?","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Boolean","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"hasPreviousPage","description":"When paginating backwards, are there more items?","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Boolean","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"startCursor","description":"When paginating backwards, the cursor to continue.","args":[],"type":{"kind":"SCALAR","name":"Cursor","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"endCursor","description":"When paginating forwards, the cursor to continue.","args":[],"type":{"kind":"SCALAR","name":"Cursor","ofType":null},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"ENUM","name":"FlagsOrderBy","description":"Methods to use when ordering `Flag`.","fields":null,"inputFields":null,"interfaces":null,"enumValues":[{"name":"NATURAL","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"ID_ASC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"ID_DESC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"FLAG_ASC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"FLAG_DESC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"PRIMARY_KEY_ASC","description":null,"isDeprecated":false,"deprecationReason":null},{"name":"PRIMARY_KEY_DESC","description":null,"isDeprecated":false,"deprecationReason":null}],"possibleTypes":null},{"kind":"INPUT_OBJECT","name":"FlagCondition","description":"A condition to be used against `Flag` object types. All fields are tested for equality and combined with a logical ‘and.’","fields":null,"inputFields":[{"name":"id","description":"Checks for equality with the object’s `id` field.","type":{"kind":"SCALAR","name":"Int","ofType":null},"defaultValue":null},{"name":"flag","description":"Checks for equality with the object’s `flag` field.","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":null}],"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"INPUT_OBJECT","name":"FlagFilter","description":"A filter to be used against `Flag` object types. All fields are combined with a logical ‘and.’","fields":null,"inputFields":[{"name":"id","description":"Filter by the object’s `id` field.","type":{"kind":"INPUT_OBJECT","name":"IntFilter","ofType":null},"defaultValue":null},{"name":"flag","description":"Filter by the object’s `flag` field.","type":{"kind":"INPUT_OBJECT","name":"StringFilter","ofType":null},"defaultValue":null},{"name":"and","description":"Checks for all expressions in this list.","type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"INPUT_OBJECT","name":"FlagFilter","ofType":null}}},"defaultValue":null},{"name":"or","description":"Checks for any expressions in this list.","type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"INPUT_OBJECT","name":"FlagFilter","ofType":null}}},"defaultValue":null},{"name":"not","description":"Negates the expression.","type":{"kind":"INPUT_OBJECT","name":"FlagFilter","ofType":null},"defaultValue":null}],"interfaces":null,"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"FlagsConnection","description":"A connection to a list of `Flag` values.","fields":[{"name":"nodes","description":"A list of `Flag` objects.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"LIST","name":null,"ofType":{"kind":"OBJECT","name":"Flag","ofType":null}}},"isDeprecated":false,"deprecationReason":null},{"name":"edges","description":"A list of edges which contains the `Flag` and cursor to aid in pagination.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"FlagsEdge","ofType":null}}}},"isDeprecated":false,"deprecationReason":null},{"name":"pageInfo","description":"Information to aid in pagination.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"PageInfo","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"totalCount","description":"The count of *all* `Flag` you could get from the connection.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Int","ofType":null}},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"Flag","description":null,"fields":[{"name":"nodeId","description":"A globally unique identifier. Can be used in various places throughout the system to identify this single value.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"ID","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"id","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Int","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"flag","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[{"kind":"INTERFACE","name":"Node","ofType":null}],"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"FlagsEdge","description":"A `Flag` edge in the connection.","fields":[{"name":"cursor","description":"A cursor for use in pagination.","args":[],"type":{"kind":"SCALAR","name":"Cursor","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"node","description":"The `Flag` at the end of the edge.","args":[],"type":{"kind":"OBJECT","name":"Flag","ofType":null},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"__Schema","description":"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.","fields":[{"name":"types","description":"A list of all types supported by this server.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__Type","ofType":null}}}},"isDeprecated":false,"deprecationReason":null},{"name":"queryType","description":"The type that query operations will be rooted at.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__Type","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"mutationType","description":"If this server supports mutation, the type that mutation operations will be rooted at.","args":[],"type":{"kind":"OBJECT","name":"__Type","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"subscriptionType","description":"If this server support subscription, the type that subscription operations will be rooted at.","args":[],"type":{"kind":"OBJECT","name":"__Type","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"directives","description":"A list of all directives supported by this server.","args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__Directive","ofType":null}}}},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"__Type","description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","fields":[{"name":"kind","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"ENUM","name":"__TypeKind","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"name","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"description","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"fields","description":null,"args":[{"name":"includeDeprecated","description":null,"type":{"kind":"SCALAR","name":"Boolean","ofType":null},"defaultValue":"false"}],"type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__Field","ofType":null}}},"isDeprecated":false,"deprecationReason":null},{"name":"interfaces","description":null,"args":[],"type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__Type","ofType":null}}},"isDeprecated":false,"deprecationReason":null},{"name":"possibleTypes","description":null,"args":[],"type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__Type","ofType":null}}},"isDeprecated":false,"deprecationReason":null},{"name":"enumValues","description":null,"args":[{"name":"includeDeprecated","description":null,"type":{"kind":"SCALAR","name":"Boolean","ofType":null},"defaultValue":"false"}],"type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__EnumValue","ofType":null}}},"isDeprecated":false,"deprecationReason":null},{"name":"inputFields","description":null,"args":[],"type":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__InputValue","ofType":null}}},"isDeprecated":false,"deprecationReason":null},{"name":"ofType","description":null,"args":[],"type":{"kind":"OBJECT","name":"__Type","ofType":null},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"ENUM","name":"__TypeKind","description":"An enum describing what kind of type a given `__Type` is.","fields":null,"inputFields":null,"interfaces":null,"enumValues":[{"name":"SCALAR","description":"Indicates this type is a scalar.","isDeprecated":false,"deprecationReason":null},{"name":"OBJECT","description":"Indicates this type is an object. `fields` and `interfaces` are valid fields.","isDeprecated":false,"deprecationReason":null},{"name":"INTERFACE","description":"Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.","isDeprecated":false,"deprecationReason":null},{"name":"UNION","description":"Indicates this type is a union. `possibleTypes` is a valid field.","isDeprecated":false,"deprecationReason":null},{"name":"ENUM","description":"Indicates this type is an enum. `enumValues` is a valid field.","isDeprecated":false,"deprecationReason":null},{"name":"INPUT_OBJECT","description":"Indicates this type is an input object. `inputFields` is a valid field.","isDeprecated":false,"deprecationReason":null},{"name":"LIST","description":"Indicates this type is a list. `ofType` is a valid field.","isDeprecated":false,"deprecationReason":null},{"name":"NON_NULL","description":"Indicates this type is a non-null. `ofType` is a valid field.","isDeprecated":false,"deprecationReason":null}],"possibleTypes":null},{"kind":"OBJECT","name":"__Field","description":"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.","fields":[{"name":"name","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"String","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"description","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"args","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__InputValue","ofType":null}}}},"isDeprecated":false,"deprecationReason":null},{"name":"type","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__Type","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"isDeprecated","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Boolean","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"deprecationReason","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"__InputValue","description":"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.","fields":[{"name":"name","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"String","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"description","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"type","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__Type","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"defaultValue","description":"A GraphQL-formatted string representing the default value for this input value.","args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"__EnumValue","description":"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.","fields":[{"name":"name","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"String","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"description","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"isDeprecated","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Boolean","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"deprecationReason","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"OBJECT","name":"__Directive","description":"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.","fields":[{"name":"name","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"String","ofType":null}},"isDeprecated":false,"deprecationReason":null},{"name":"description","description":null,"args":[],"type":{"kind":"SCALAR","name":"String","ofType":null},"isDeprecated":false,"deprecationReason":null},{"name":"locations","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"ENUM","name":"__DirectiveLocation","ofType":null}}}},"isDeprecated":false,"deprecationReason":null},{"name":"args","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"LIST","name":null,"ofType":{"kind":"NON_NULL","name":null,"ofType":{"kind":"OBJECT","name":"__InputValue","ofType":null}}}},"isDeprecated":false,"deprecationReason":null}],"inputFields":null,"interfaces":[],"enumValues":null,"possibleTypes":null},{"kind":"ENUM","name":"__DirectiveLocation","description":"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.","fields":null,"inputFields":null,"interfaces":null,"enumValues":[{"name":"QUERY","description":"Location adjacent to a query operation.","isDeprecated":false,"deprecationReason":null},{"name":"MUTATION","description":"Location adjacent to a mutation operation.","isDeprecated":false,"deprecationReason":null},{"name":"SUBSCRIPTION","description":"Location adjacent to a subscription operation.","isDeprecated":false,"deprecationReason":null},{"name":"FIELD","description":"Location adjacent to a field.","isDeprecated":false,"deprecationReason":null},{"name":"FRAGMENT_DEFINITION","description":"Location adjacent to a fragment definition.","isDeprecated":false,"deprecationReason":null},{"name":"FRAGMENT_SPREAD","description":"Location adjacent to a fragment spread.","isDeprecated":false,"deprecationReason":null},{"name":"INLINE_FRAGMENT","description":"Location adjacent to an inline fragment.","isDeprecated":false,"deprecationReason":null},{"name":"VARIABLE_DEFINITION","description":"Location adjacent to a variable definition.","isDeprecated":false,"deprecationReason":null},{"name":"SCHEMA","description":"Location adjacent to a schema definition.","isDeprecated":false,"deprecationReason":null},{"name":"SCALAR","description":"Location adjacent to a scalar definition.","isDeprecated":false,"deprecationReason":null},{"name":"OBJECT","description":"Location adjacent to an object type definition.","isDeprecated":false,"deprecationReason":null},{"name":"FIELD_DEFINITION","description":"Location adjacent to a field definition.","isDeprecated":false,"deprecationReason":null},{"name":"ARGUMENT_DEFINITION","description":"Location adjacent to an argument definition.","isDeprecated":false,"deprecationReason":null},{"name":"INTERFACE","description":"Location adjacent to an interface definition.","isDeprecated":false,"deprecationReason":null},{"name":"UNION","description":"Location adjacent to a union definition.","isDeprecated":false,"deprecationReason":null},{"name":"ENUM","description":"Location adjacent to an enum definition.","isDeprecated":false,"deprecationReason":null},{"name":"ENUM_VALUE","description":"Location adjacent to an enum value definition.","isDeprecated":false,"deprecationReason":null},{"name":"INPUT_OBJECT","description":"Location adjacent to an input object type definition.","isDeprecated":false,"deprecationReason":null},{"name":"INPUT_FIELD_DEFINITION","description":"Location adjacent to an input object field definition.","isDeprecated":false,"deprecationReason":null}],"possibleTypes":null}],"directives":[{"name":"include","description":"Directs the executor to include this field or fragment only when the `if` argument is true.","locations":["FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT"],"args":[{"name":"if","description":"Included when true.","type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Boolean","ofType":null}},"defaultValue":null}]},{"name":"skip","description":"Directs the executor to skip this field or fragment when the `if` argument is true.","locations":["FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT"],"args":[{"name":"if","description":"Skipped when true.","type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"Boolean","ofType":null}},"defaultValue":null}]},{"name":"deprecated","description":"Marks an element of a GraphQL schema as no longer supported.","locations":["FIELD_DEFINITION","ENUM_VALUE"],"args":[{"name":"reason","description":"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax (as specified by [CommonMark](https://commonmark.org/).","type":{"kind":"SCALAR","name":"String","ofType":null},"defaultValue":"\"No longer supported\""}]}]}}}